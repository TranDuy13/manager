{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  console.log(user);\n});\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const logout = createAsyncThunk(\"auth/ \", async () => {\n  await authService.logout();\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.user = null;\n      state.message = action.payload;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = action.payload;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Volumes/DATA/employee-manager/frontend/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","console","log","login","error","response","data","toString","rejectWithValue","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport authService from \"./authService\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n};\r\n\r\nexport const register = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (user, thunkAPI) => {\r\n    console.log(user);\r\n  }\r\n);\r\n\r\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\nexport const logout = createAsyncThunk(\"auth/ \", async () => {\r\n  await authService.logout()\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.isSuccess = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.user = null;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.message = action.payload;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}